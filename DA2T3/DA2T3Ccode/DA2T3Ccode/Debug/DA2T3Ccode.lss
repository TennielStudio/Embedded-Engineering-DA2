
DA2T3Ccode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fc  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065b  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000288  00000000  00000000  00000efb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001184  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define LED_PIN PORTB2


int main(void)
{
	LEDDDR |= ( 1 << LED_PIN);
  80:	22 9a       	sbi	0x04, 2	; 4
	LEDPORT &= ~( 1 << LED_PIN);
  82:	2a 98       	cbi	0x05, 2	; 5
	
	// 1. T = 1/8MHz = .125us
	// 2. .25ms delay / .125us = 20 clock cycles
	// 3. 256 - 20 = 236
	
	TCCR0A = 0;							// Chooses normal mode
  84:	14 bc       	out	0x24, r1	; 36
	TCNT0 = 236;
  86:	8c ee       	ldi	r24, 0xEC	; 236
  88:	86 bd       	out	0x26, r24	; 38
	TCCR0B = (1 << CS02) | (1 << CS00); 
  8a:	85 e0       	ldi	r24, 0x05	; 5
  8c:	85 bd       	out	0x25, r24	; 37
	// clock divided by 1024

	
	while (( TIFR0 & 0x01) == 0)
  8e:	a8 99       	sbic	0x15, 0	; 21
  90:	11 c0       	rjmp	.+34     	; 0xb4 <main+0x34>
			{
			_delay_ms(2000); // creates a delay of 250,000 us 
			TCNT0 = 0;  // clears the counter 
			TIFR0 |= (1 << TOV0); // clears the overflow flag
			LEDPORT ^= (1 << LED_PIN); //toggles the pin
  92:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	2f e7       	ldi	r18, 0x7F	; 127
  96:	3a e1       	ldi	r19, 0x1A	; 26
  98:	86 e0       	ldi	r24, 0x06	; 6
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	30 40       	sbci	r19, 0x00	; 0
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x1a>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x24>
  a4:	00 00       	nop

	
	while (( TIFR0 & 0x01) == 0)
			{
			_delay_ms(2000); // creates a delay of 250,000 us 
			TCNT0 = 0;  // clears the counter 
  a6:	16 bc       	out	0x26, r1	; 38
			TIFR0 |= (1 << TOV0); // clears the overflow flag
  a8:	a8 9a       	sbi	0x15, 0	; 21
			LEDPORT ^= (1 << LED_PIN); //toggles the pin
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	89 27       	eor	r24, r25
  ae:	85 b9       	out	0x05, r24	; 5
	TCNT0 = 236;
	TCCR0B = (1 << CS02) | (1 << CS00); 
	// clock divided by 1024

	
	while (( TIFR0 & 0x01) == 0)
  b0:	a8 9b       	sbis	0x15, 0	; 21
  b2:	f0 cf       	rjmp	.-32     	; 0x94 <main+0x14>
	
	
}


}
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	08 95       	ret

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
