
DA2T2Ccode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000837  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a3  00000000  00000000  00000a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b0  00000000  00000000  000010e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001be  00000000  00000000  00001789  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001947  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <checkButton>:
// De bounces button input
short checkButton()
{
	short matchValue = 0; // match counter
	
	while(!(PIND & (1 << BUTTON_PIN)) && // Check if button is still held down
  80:	4a 99       	sbic	0x09, 2	; 9
  82:	10 c0       	rjmp	.+32     	; 0xa4 <checkButton+0x24>
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	2f 5f       	subi	r18, 0xFF	; 255
  8a:	3f 4f       	sbci	r19, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	8f e0       	ldi	r24, 0x0F	; 15
  8e:	97 e2       	ldi	r25, 0x27	; 39
  90:	01 97       	sbiw	r24, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <checkButton+0x10>
  94:	00 c0       	rjmp	.+0      	; 0x96 <checkButton+0x16>
  96:	00 00       	nop
  98:	4a 99       	sbic	0x09, 2	; 9
  9a:	06 c0       	rjmp	.+12     	; 0xa8 <checkButton+0x28>
  9c:	2a 30       	cpi	r18, 0x0A	; 10
  9e:	31 05       	cpc	r19, r1
  a0:	99 f7       	brne	.-26     	; 0x88 <checkButton+0x8>
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <checkButton+0x28>


// De bounces button input
short checkButton()
{
	short matchValue = 0; // match counter
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
		matchValue++;
		_delay_ms(5);
		
	}
	// return true if button has been held for 50ms
	return (matchValue == 10);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	2a 30       	cpi	r18, 0x0A	; 10
  ae:	31 05       	cpc	r19, r1
  b0:	11 f0       	breq	.+4      	; 0xb6 <checkButton+0x36>
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
}
  b6:	08 95       	ret

000000b8 <main>:
#define LED_PIN PORTB2

short checkButton();
int main(void)
{
	LEDDDR |= (1 << LED_PIN);	// Set LED to output
  b8:	22 9a       	sbi	0x04, 2	; 4
	LEDPORT &= ~(1 << LED_PIN); // Initial state of OFF
  ba:	2a 98       	cbi	0x05, 2	; 5
	
	BUTTONPORT |= (1 << BUTTON_PIN); // Internal pull-up
  bc:	5a 9a       	sbi	0x0b, 2	; 11
	
	while (1)
	{
		
		short buttonActivated = checkButton();
  be:	0e 94 40 00 	call	0x80	; 0x80 <checkButton>
		if(buttonActivated)
  c2:	89 2b       	or	r24, r25
  c4:	31 f1       	breq	.+76     	; 0x112 <main+0x5a>
		{
			
			LEDPORT |= (1 << PORTB2); // turn on light
  c6:	2a 9a       	sbi	0x05, 2	; 5
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	81 ee       	ldi	r24, 0xE1	; 225
  cc:	94 e0       	ldi	r25, 0x04	; 4
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x16>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x20>
  d8:	00 00       	nop
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	81 ee       	ldi	r24, 0xE1	; 225
  de:	94 e0       	ldi	r25, 0x04	; 4
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x28>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x32>
  ea:	00 00       	nop
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	81 ee       	ldi	r24, 0xE1	; 225
  f0:	94 e0       	ldi	r25, 0x04	; 4
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x3a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x44>
  fc:	00 00       	nop
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	81 ee       	ldi	r24, 0xE1	; 225
 102:	94 e0       	ldi	r25, 0x04	; 4
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x4c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x56>
 10e:	00 00       	nop
 110:	d6 cf       	rjmp	.-84     	; 0xbe <main+0x6>
			
		}
		else
			{
			
			LEDPORT &= ~(1 << PORTB2); // turn off light
 112:	2a 98       	cbi	0x05, 2	; 5
 114:	d4 cf       	rjmp	.-88     	; 0xbe <main+0x6>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
